require 'spec_helper'
$config = OpenStruct.new(
    :image_dir => 'tmp',
    :image_max => 2*2**20,
    :storage_limit => 20*2**20
)
require 'lib/upload'

describe Upload do
  #create and remove the tmp folder
  before(:all) do
    FileUtils.mkdir 'public/tmp'
  end
  after(:all) do
    FileUtils.remove_dir 'public/tmp'
  end
  let(:u){ Upload.new }

  context 'makeFilename' do
    it 'should use the original filename if there is no file with that name' do
      u.org_filename = "test_name.png"
      u.makeFilename.should eq("test_name.png")
    end
    it 'should check if a file with that name already exists' do
      u.org_filename = "an_existing_file.png"
      Upload.expects(:exists?).with(u.org_filename).returns(true)
      u.makeFilename
    end
    it 'should append an timestamp to the filename if a equal filename exists' do
      u.org_filename = "an_existing_file.png"
      Upload.expects(:exists?).returns(true)
      u.makeFilename.should eq("an_existing_file_#{Time.now.to_i}.png")
    end
  end
  context 'params' do
    it 'should set the original filename' do
      u.params = {:filename => 'test.file'}
      u.org_filename.should eq('test.file')
    end
  end


  context 'with params' do
    before do
      u.params = {:filename => "foo.bar"}
    end
    context 'filename' do
      it 'should call makeFilename if not already done' do
        u.expects(:makeFilename)
        u.filename
      end
      it 'should return the cached filename if you previously called makeFilename' do
        u.expects(:makeFilename).once.returns("foo.bar")
        u.filename
        u.filename
      end
      it 'should return the filename generated by makeFilename' do
        u.filename.should eq("foo.bar")
      end
    end

    context 'link' do
      it 'should return the full link to the image' do
        u.link.should eq('tmp/foo.bar')
      end
    end
    context 'save' do

    end
  end

  context 'self.exists?' do
    it 'should determine that a file already exists' do
      File.expects(:exists?).returns(true)
      Upload.exists?("existing_file.png")
    end
    it 'should return false if no file with that name exists' do
      Upload.exists?("new_file.png").should be_false
    end
    it 'should return false if no file with that name exists' do
      FileUtils.touch  "public/tmp/existing_file.png"
      Upload.exists?("existing_file.png").should be_true
    end
  end
end
